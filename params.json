{"name":"Tint JS","body":"Tint uses templates which specify an interface of variables, namespaces, and functions. That interface is used to compile a prototype for objects which build the output.\r\n\r\nThe template:\r\n\r\n```HTML\r\n<div id=\"container\">\r\n    <div id=\"nav\">\r\n        $nav{\r\n        <ul class=\"nav-list\">\r\n            $item() {\r\n                $header(label){<li class=\"nav-header\">$label;</li>}header;\r\n                $link(label, uri){<li><a href=\"$uri;\">$label;</a></li>}link;\r\n            }item;\r\n        </ul>\r\n        }nav;\r\n    </div>\r\n    <div id=\"content\">\r\n        <h3>$title;</h3>\r\n        <table>\r\n            $message(uri, author, title, date) {\r\n                <tr>\r\n                    <td>$author;</td>\r\n                    <td><a href=\"$uri;\">$title;</a></td>\r\n                    <td>$date;</td>\r\n                </tr>\r\n            }message;\r\n        </table>\r\n    </div>\r\n</div>\r\n```\r\n\r\nThe javascript:\r\n\r\n```javascript\r\n// Compile the prototype\r\n// `templateString` contains the above template\r\nvar Tmpl = Tint.compile(templateString);\r\n\r\n// ...\r\n\r\n// Instantiate the builder object\r\nvar tmpl = new Tmpl();\r\n\r\n// nav\r\ntmpl.nav.item().header('Inbox');\r\ntmpl.nav.item().link('Inbox', '/');\r\ntmpl.nav.item().link('Settings', '/settings');\r\ntmpl.nav.item().header('Services');\r\ntmpl.nav.item().link('MyService', '/myservice');\r\n\r\n// content\r\ntmpl.title = \"Your Inbox\";\r\nfor (var i=0; i < messages.length; i++) {\r\n    var message = messages[i];\r\n    tmpl.message(message.uri, message.author, message.summary, message.date);\r\n}\r\n\r\n// Generate output\r\nvar html = tmpl.toString();\r\n```\r\n\r\nYou can also extend the prototype, if you like:\r\n\r\n```javascript\r\n// Add a custom constructor\r\nvar Tmpl = new Tint.compile(templateString, function(services) {\r\n    this.nav.item().header('Inbox');\r\n    this.nav.item().link('Inbox', '');\r\n    this.nav.item().link('Settings', '/settings');\r\n    this.nav.item().header('Services');\r\n    for (var i=0; i < services.length; i++) {\r\n        this.nav.item().link(services[i].name, services[i].uri);\r\n    }\r\n});\r\nTmpl.prototype.addMessage = function(message) {\r\n    this.message(message.uri, message.author, message.summary, message.date);\r\n};\r\n\r\n// ...\r\n\r\n// Instantiate the builder object\r\nvar tmpl = new Tmpl(my_services);\r\ntmpl.title = \"Your Inbox\";\r\nfor (var i=0; i < messages.length; i++) {\r\n    tmpl.addMessage(messages[i]);\r\n}\r\nvar html = tmpl.toString();\r\n```\r\n\r\n## How it works\r\n\r\nTint's templates use 3 different constructs:\r\n\r\n - Blocks\r\n - Variables\r\n - Functions\r\n\r\n**Blocks** are just namespaces for parts of the template. They don't change the output.\r\n\r\n`$block_name{ whatever }block_name;`\r\n\r\n**Variables** are direct substitutions. They're replaced with whatever value they're assigned.\r\n\r\n`$variable_name;`\r\n\r\n**Functions** are blocks which can be added multiple times, and which take parameter lists.\r\n\r\n`$func_name(param1, param2) { whatever $param1; whatever $param2; }func_name;`\r\n\r\nThat's it; those building blocks are enough to generate your output. Any logic you need (like conditionals, escaping, or lists with commas on all but the last item) is added to the prototype, by you, using a language that's designed for it (Javascript).\r\n\r\n## A few additional notes\r\n\r\nFunction calls generate blocks which are stored in an array with a prefix added to the name. That is, if my template has a `$profile(username)` function, then I can access the blocks it creates at `_profile[]`. Function parameters are stored as variables with the same name as the parameter itself: `_profile[0].username`.","tagline":"Logicless templates","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}